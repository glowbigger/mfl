// function type inference
let func =
fn(x: num, y: str) => void { print x; };

// valid function type hinting
let func: (num, str) => void =
fn(x: num, y: str) => void { print x; };
let func: (() => void) => void =
fn(x: () => void) => void { print x; };
let func: ((str, num) => void, () => str ) => void =
fn(x: (str, num) => void, y: () => str ) => void { print x; };

// invalid function type hinting
let func: (str, str) => void =
fn(x: num, y: str) => void { print x; };
let func: (num, str, str) => void =
fn(x: num, y: str) => void { print x; };
let func: (num, str) => str =
fn(x: num, y: str) => void { print x; };
let func: (num, str) => void =
fn(x: num, y: str) => str { print x; };
let func: (() => void) => void =
fn(x: num, y: str) => str { print x; };
let func: ((str, num) => void) => void =
fn(x: (str, num) => void, y: str) => void { print x; };

// assignment
let fun: () => void = fn() => void { print 5; };
fun = fn() => void { print 5; }; // fine
fun = fn(x: num) => void { print x; }; // error
fun = fn() => str { print ''; }; // error
