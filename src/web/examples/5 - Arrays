// Arrays can be created by specifying the elements in brackets or by providing
// a number along with an expression.
print [ 'a', 'b', 'c' ];
print [ 5 of true ];

let fnArr = [ fn () => num { return 0; }, fn () => num { return 1; } ];
print fnArr[0]();
print fnArr[1]();

// Array types are given by wrapping '[' and ']' around the inner type
let arr3: [ bool ] = [ 5 of true ];
let idMatrix: [[ num ]] = [[ 1, 0, 0],
                           [ 0, 1, 0],
                           [ 0, 0, 1]];

// WARNING empty arrays can not be made using []. Instead use [ 0 of ... ];
let emptyArr = [ 0 of 0 ]; // this is fine, the type is [ num ]
print emptyArr;

// Array values can be reassigned by specifying the index
let arr = [[ 0, 0 ], [ 0, 0 ]]; print arr;
arr[0][1] = 4; print arr;

// The size of an array is fixed, but one way of lengthening an array is by
// adding the desired elements to it using the + operator.
let arr: [ num ] = [ 0, 1, 2 ];
arr = arr + [3, 4, 5];
print arr;

// The 'len' keyword can be used to get the length of an array;
print len [1, 2, 3];

// NOTE the reason why fixed-length arrays are the only supported data structure
// is because other common data structures, linked lists, dictionaries, dynamic 
// arrays, etc. can be built in the language using fixed-length arrays and
// classes. Unfortunately, classes are not supported at the moment.
