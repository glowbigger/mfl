/*
Below is the grammar for the language, written in a BNF-like way.

program           → statement* EOF ;

// statements

statement         → ifStmt | blockStmt | whileStmt |
                  ( ( declarationStmt | printStmt | exprStmt | returnStmt )? ";" ) ;
ifStmt            → "if" expression "then" statement ( "else" statement )? ;
blockStmt         → "{" statement* "}" ;
whileStmt         → "while" condition then statement
declarationStmt   → "let" IDENTIFIER ( ":" type )? "=" expression ;
exprStmt          → expression ;
printStmt         → "print" expression ;
returnStmt        → "return" expression ;

// types

type              → "number" | "string" | "bool" | functionType | arrayType ;
functionType      → "(" ( ( type "," )* type )? ")" "=>"
                    type ;
arrayType         → "[" type "]"

// expressions

expression        → assignment ;
assignment        → IDENTIFIER "=" assignment |
                    callOrAccess "=" assignment |
                    logic_or ;
logic_or          → logic_and ( "or" expression )* ;
logic_and         → equality ( "and" expression )* ;
equality          → comparison ( ( "!=" | "==" ) comparison )* ;
comparison        → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term              → factor ( ( "-" | "+" ) factor )* ;
factor            → unary ( ( "/" | "*" | "%" ) unary )* ;
unary             → ( "!" | "-" ) unary | length ;
length            → "len" expression | callOrAccess ;
callOrAccess      → primary ( arrayAccess | call )* ;
arrayAccess       → "[" expression "]" ;
call              → "(" ( expression ( "," expression)* )? ")" ;
primary           → NUMBER | STRING | "true" | "false" | functionObject |
                    arrayObject | IDENTIFIER | "(" expression ")" ;
functionObject    → "fn" "(" ( ( IDENTIFIER ":" type "," )* 
                    ( IDENTIFIER ":" type ) )? ")" 
                    "=>" type statement ;
arrayObject       → filledArray | lengthArray ;
filledArray       → "[" ( expression (( "," expression )* )? )? "]"
lengthArray       → "[" expression "of" expression "]" ;
*/
