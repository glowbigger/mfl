// This function demonstrates that function scopes work properly, even in
// functions that are returned by other functions.

// This function contains a counter and returns a function that increments it.
let returnAdder = fn () => () => num {
  let counter = 0;

  return fn () => num { 
    counter = counter + 1;
    return counter;
  };
};

// This adder has its own counter variable.
let adder1 = returnAdder();
print adder1(); // 1
print adder1(); // 2
print adder1(); // 3

// This adder also has its own counter variable.
let adder2 = returnAdder();
print adder2(); // 1
print adder2(); // 2

// Modifying adder2's counter did not affect adder1's counter.
print adder1(); // 4

// This adder has its own counter variable that is not bound to a variable ...
print returnAdder()(); // 1

// ... so the counter is not permanent.
print returnAdder()(); // 1
