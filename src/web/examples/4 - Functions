// Functions are created with 'fn', and are anonymous (unnamed) by default.

// Here is an example anonymous function that sits in its own statement
// NOTE the return type and parameter types must be hinted
// NOTE void functions are not supported.
fn(x: num) => num { return x; } ;

// The above function does nothing because it was never called. One way to call
// a function is to assign it to a variable.
let addNums = fn(x: num, y: num) => num {
  return x + y;
};
print addNums(1, 2);

// Functions can be type-hinted too using () => notation.
let conditionalPrint: (num, str) => str =
fn(x: num, message: str) => str {
  return 'a string';
};

// Functions can return other functions, since functions are first-class.
let returnAFunctionThatReturnsFive =
fn() => () => num { 
  return ( fn() => num { return 5; } );
};
let returnFive = returnAFunctionThatReturnsFive();
print returnFive();

// Naturally, functions can also take other functions as arguments.
let returnSumOfOutputs = fn(func1: () => num, func2: () => num) => num {
  return func1() + func2();
};
print returnSumOfOutputs(returnFive, returnFive);

// Recursion works too. Here are the first 25 fibonacci numbers.
let fib = fn(n: num) => num {
  if n <= 1 then return n;
  return fib(n - 1) + fib(n - 2);
};
let i = 1;
while i <= 25 do {
  print i + ': ' + fib(i);
  i = i + 1;
}
