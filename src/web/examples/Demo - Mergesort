// an implementation of recursive merge sort
// https://en.wikipedia.org/wiki/Merge_sort

// splits arrays of even length in half, splits arrays of odd length such that
// the left half has one more element than the right half, returns an array
// containing both halves
let split = fn(arr: [num]) => [[num]] {
  let length = len arr;

  // base cases
  let empty_arr = [0 of 0];
  if length == 1 then return [arr, empty_arr];
  if length == 0 then return [empty_arr, empty_arr];

  // the midpoint, ie the first element of the second half of the array
  // initialized to a dummy value of 0
  let mid = 0;
  if length % 2 == 0 then
    mid = length / 2;
  else
    mid = (length + 1) / 2;

  // initialize the halves to have only 0s as values
  let leftHalfLen = mid;
  let rightHalfLen = length - mid;
  let leftHalf = [leftHalfLen of 0];
  let rightHalf = [rightHalfLen of 0];

  let i = 0;
  while i < mid do {
    leftHalf[i] = arr[i];
    i = i + 1;
  }

  while i < length do {
    rightHalf[i - mid] = arr[i];
    i = i + 1;
  }

  return [leftHalf, rightHalf];
};

print(split([0 of 0]));
print(split([1]));
print(split([1, 2]));
print(split([1, 2, 3]));
print(split([1, 2, 3, 4]));
print(split([1, 2, 3, 4, 5, 6, 7, 8]));
print(split([1, 2, 3, 4, 5, 6, 7, 8, 9]));
